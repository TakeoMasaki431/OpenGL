---PARATHYRO ME GRAMMES---
#include <Windows.h>
#include <GL\glew.h>
#include <GL\freeglut.h>
#include <iostream>

void display() {
	// Set color of background (def=black) to Yellow
	glClearColor(0, 1, 1, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	/*
	glClearColor(0, 1, 1, 0.0);: 
	Ορίζει το χρώμα του φόντου σε κίτρινο. 
	Οι παράμετροι (0, 1, 1, 0.0) αντιστοιχούν στα χρώματα (R, G, B, A). 
	Εδώ έχουμε πράσινο και μπλε στο μέγιστο (1), που συνδυάζονται για να δώσουν κίτρινο. 
	Η A είναι η διαφάνεια (0 είναι πλήρως διαφανές, 1 είναι πλήρως αδιαφανές).
	glClear(GL_COLOR_BUFFER_BIT);: 
	Καθαρίζει το χρώμα του buffer, δηλαδή, γεμίζει την οθόνη με το χρώμα φόντου που έχουμε ορίσει.	
	*/
	glMatrixMode(GL_MODELVIEW);  //or GL_PROJECTION) if you want to affect the projection mat
	glLoadIdentity();//has to be at beg of any prog that has transformations
	/*
	glMatrixMode(GL_MODELVIEW);: 
	Ορίζει τη λειτουργία της μήτρας στο GL_MODELVIEW, που μας επιτρέπει να κάνουμε μετασχηματισμούς (π.χ., μετακινήσεις, περιστροφές) 
	πάνω στο αντικείμενο. 
	Μπορείς επίσης να χρησιμοποιήσεις GL_PROJECTION αν θέλεις να αλλάξεις τη μήτρα προβολής.
	glLoadIdentity();: Φορτώνει την ταυτότητα (identity matrix) ώστε να μηδενίζει τυχόν προηγούμενους μετασχηματισμούς. 
	Είναι σημαντικό να το βάλουμε στην αρχή αν θέλουμε να κάνουμε καθαρούς μετασχηματισμούς.*/
	glLineWidth(2); //Ορίζει το πάχος των γραμμών σε 2 pixels.
	//Axes (Blue)
	glColor3f(0.0, 0, 1.0f);
	glBegin(GL_LINES);
	/*
	glColor3f(0.0, 0, 1.0f);: Ορίζει το χρώμα των γραμμών σε μπλε. 
	Οι παράμετροι (R, G, B) είναι (0.0, 0, 1.0f), με το 1.0f να σημαίνει πλήρες μπλε.
	glBegin(GL_LINES);: Ξεκινά η σχεδίαση γραμμών. 
	Ορίζουμε ένα ζεύγος σημείων για κάθε γραμμή.*/
	glVertex3f(0.0f, -1.0f, 0.0f);
	glVertex3f(0.0f, 1.0f, 0.0f);
	glVertex3f(1.0f, 0.0f, 0.0f);
	glVertex3f(-1.0f, 0.0f, 0.0f);
	/*glVertex3f(...): Ορίζει τα σημεία των γραμμών σε τρισδιάστατο χώρο (x, y, z). Δημιουργούμε δύο γραμμές:
	Από (0, -1, 0) έως (0, 1, 0) για τον κατακόρυφο άξονα.
	Από (1, 0, 0) έως (-1, 0, 0) για τον οριζόντιο άξονα.*/
	glEnd();
	glFlush();
	/*glEnd();: Τερματίζει τη σχεδίαση γραμμών.
	glFlush();: Εκτελεί όλες τις OpenGL εντολές για να εμφανιστούν τα γραφικά στην οθόνη.*/
}


int main(int argc, char* argv[]) {

	// Initialize GLUT
	glutInit(&argc, argv); //glutInit(&argc, argv);: Αρχικοποιεί το GLUT και διαβάζει παραμέτρους από τη γραμμή εντολών.

	// Set the window size
	glutInitWindowSize(800, 600);
	// Create the window with the title "Hello,GL"
	glutCreateWindow("Hello, GL");
	// Bind the two functions (above) to respond when necessary
	glutDisplayFunc(display);

	// To avoid window to be closed
	glutMainLoop();
	return 0;
}



---TRIGWNO---

#include <GL/glew.h>
#include <GL/freeglut.h>
#include <iostream>

// Coordinates for the triangle
float vertices[] = {
     0.0f,  0.5f, 0.0f,  // Top
    -0.5f, -0.5f, 0.0f,  // Bottom left
     0.5f, -0.5f, 0.0f   // Bottom right
};

// IDs for VBO and VAO
unsigned int VBO, VAO;

// OpenGL initialization function
void initGL() {
    // Generate and bind VAO and VBO
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    
    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // Set vertex attribute pointers
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

// Rendering function
void display() {
    // Clear screen with specific color
    glClearColor(0.1f, 0.2f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the triangle
    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLES, 0, 3);

    glBindVertexArray(0);
    glutSwapBuffers();
}

// Window resize function
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
}

// Main function
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Simple Triangle with FreeGLUT");

    // Initialize GLEW
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW\n";
        return -1;
    }

    // Call the OpenGL initialization function
    initGL();

    // Set up callbacks
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    // Enter the main loop
    glutMainLoop();

    // Clean up resources before exiting
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

    return 0;
}

---TETRAGWNO---
#include <GL/glew.h>
#include <GL/freeglut.h>
#include <iostream>

// Coordinates for the square (two triangles)
float vertices[] = {
    -0.5f,  0.5f, 0.0f,  // Top-left
     0.5f,  0.5f, 0.0f,  // Top-right
     0.5f, -0.5f, 0.0f,  // Bottom-right
    -0.5f, -0.5f, 0.0f   // Bottom-left
};

// Indices to define the two triangles of the square
unsigned int indices[] = {
    0, 1, 2,  // First triangle (top-right)
    2, 3, 0   // Second triangle (bottom-left)
};

// IDs for VBO, VAO, and EBO (Element Buffer Object)
unsigned int VBO, VAO, EBO;

// OpenGL initialization function
void initGL() {
    // Generate and bind VAO, VBO, and EBO
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);
    
    glBindVertexArray(VAO);
    
    // Bind vertices to VBO
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    
    // Bind indices to EBO
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
    
    // Set vertex attribute pointers
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

// Rendering function
void display() {
    // Clear screen with specific color
    glClearColor(0.1f, 0.2f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw the square
    glBindVertexArray(VAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
    
    glBindVertexArray(0);
    glutSwapBuffers();
}

// Window resize function
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
}

// Main function
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Simple Square with FreeGLUT");

    // Initialize GLEW
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW\n";
        return -1;
    }

    // Call the OpenGL initialization function
    initGL();

    // Set up callbacks
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    // Enter the main loop
    glutMainLoop();

    // Clean up resources before exiting
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);

    return 0;
}

---KYKLOS---
#include <GL/glew.h>
#include <GL/freeglut.h>
#include <iostream>
#include <cmath>

#define M_PI 3.14159265358979323846

// Number of segments for the circle (higher = smoother circle)
const int num_segments = 100;
const float radius = 0.5f;

// IDs for VBO and VAO
unsigned int VBO, VAO;

// Generate vertices for the circle
void generateCircleVertices(float* vertices) {
    vertices[0] = 0.0f;  // Center x
    vertices[1] = 0.0f;  // Center y
    vertices[2] = 0.0f;  // Center z

    for (int i = 0; i <= num_segments; ++i) {
        float angle = 2.0f * M_PI * i / num_segments;
        vertices[(i + 1) * 3] = radius * cos(angle);  // x
        vertices[(i + 1) * 3 + 1] = radius * sin(angle);  // y
        vertices[(i + 1) * 3 + 2] = 0.0f;  // z
    }
}

// OpenGL initialization function
void initGL() {
    // Allocate memory for vertices
    float* vertices = new float[(num_segments + 2) * 3];
    generateCircleVertices(vertices);

    // Generate and bind VAO and VBO
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, (num_segments + 2) * 3 * sizeof(float), vertices, GL_STATIC_DRAW);

    // Set vertex attribute pointers
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // Free allocated memory
    delete[] vertices;

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

// Rendering function
void display() {
    // Clear screen with specific color
    glClearColor(0.1f, 0.2f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the circle
    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_FAN, 0, num_segments + 2);

    glBindVertexArray(0);
    glutSwapBuffers();
}

// Window resize function
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
}

// Main function
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Simple Circle with FreeGLUT");

    // Initialize GLEW
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW\n";
        return -1;
    }

    // Call the OpenGL initialization function
    initGL();

    // Set up callbacks
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    // Enter the main loop
    glutMainLoop();

    // Clean up resources before exiting
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);

    return 0;
}

